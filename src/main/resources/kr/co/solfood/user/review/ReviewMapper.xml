<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.solfood.user.review.ReviewMapper">

    <!-- 리뷰 목록 조회 -->
    <select id="selectReviewList" resultType="kr.co.solfood.user.review.ReviewVO">
        SELECT 
            review_id,
            users_id,
            store_id,
            userspayment_id,
            reviewcomment_id,
            review_star,
            review_image,
            review_date,
            review_status,
            review_title,
            review_content,
            review_response
        FROM review
        ORDER BY review_id DESC
    </select>

    <!-- 평균 별점 조회 -->
    <select id="selectAverageStar" resultType="double">
        SELECT ROUND(AVG(review_star), 1) as avgStar
        FROM review
    </select>

    <!-- 총 리뷰 개수 조회 -->
    <select id="selectTotalCount" resultType="int">
        SELECT COUNT(*) as totalCount
        FROM review
    </select>

    <!-- 별점별 개수 조회 -->
    <select id="selectStarCounts" resultType="java.util.Map">
        SELECT 
            SUM(CASE WHEN review_star = 5 THEN 1 ELSE 0 END) as star5,
            SUM(CASE WHEN review_star = 4 THEN 1 ELSE 0 END) as star4,
            SUM(CASE WHEN review_star = 3 THEN 1 ELSE 0 END) as star3,
            SUM(CASE WHEN review_star = 2 THEN 1 ELSE 0 END) as star2,
            SUM(CASE WHEN review_star = 1 THEN 1 ELSE 0 END) as star1
        FROM review
    </select>

    <!-- 리뷰 상세 조회 -->
    <select id="selectReviewById" parameterType="int" resultType="kr.co.solfood.user.review.ReviewVO">
        SELECT 
            review_id,
            users_id,
            store_id,
            userspayment_id,
            reviewcomment_id,
            review_star,
            review_image,
            review_date,
            review_status,
            review_title,
            review_content,
            review_response
        FROM review
        WHERE review_id = #{reviewId}
    </select>

    <!-- 리뷰 등록 -->
    <insert id="insertReview" parameterType="kr.co.solfood.user.review.ReviewVO" useGeneratedKeys="true" keyProperty="reviewId">
        INSERT INTO review (
            users_id, store_id, userspayment_id, reviewcomment_id, review_star, review_image, review_date, review_status, review_title, review_content, review_response
        ) VALUES (
            #{usersId}, #{storeId}, #{usersPaymentId}, #{reviewCommentId}, #{reviewStar}, #{reviewImage}, #{reviewDate}, #{reviewStatus}, #{reviewTitle}, #{reviewContent}, #{reviewResponse}
        )
    </insert>

    <!-- 리뷰 수정 -->
    <update id="updateReview" parameterType="kr.co.solfood.user.review.ReviewVO">
        UPDATE review SET
            users_id = #{usersId},
            store_id = #{storeId},
            userspayment_id = #{usersPaymentId},
            reviewcomment_id = #{reviewCommentId},
            review_star = #{reviewStar},
            review_image = #{reviewImage},
            review_date = #{reviewDate},
            review_status = #{reviewStatus},
            review_title = #{reviewTitle},
            review_content = #{reviewContent},
            review_response = #{reviewResponse}
        WHERE review_id = #{reviewId}
    </update>

    <!-- 리뷰 삭제 -->
    <delete id="deleteReview" parameterType="int">
        DELETE FROM review WHERE review_id = #{reviewId}
    </delete>

    <!-- 식당명으로 리뷰 검색 -->
    <select id="selectReviewsByRestaurant" parameterType="string" resultType="kr.co.solfood.user.review.ReviewVO">
        SELECT 
            review_id as reviewId,
            title,
            content,
            rating,
            author,
            restaurant_name as restaurantName,
            created_at as createdAt,
            updated_at as updatedAt
        FROM review 
        WHERE restaurant_name LIKE CONCAT('%', #{restaurantName}, '%')
        ORDER BY created_at DESC
    </select>

    <!-- 가게ID로 리뷰 목록 조회 -->
    <select id="selectReviewsByStoreId" parameterType="int" resultType="kr.co.solfood.user.review.ReviewVO">
        SELECT 
            review_id as reviewId,
            users_id as usersId,
            store_id as storeId,
            userspayment_id as usersPaymentId,
            reviewcomment_id as reviewCommentId,
            review_star as reviewStar,
            review_image as reviewImage,
            review_date as reviewDate,
            review_status as reviewStatus,
            review_title as reviewTitle,
            review_content as reviewContent,
            review_response as reviewResponse
        FROM review
        WHERE store_id = #{storeId}
        ORDER BY review_id DESC
    </select>

    <!-- 특정 가게의 평균 별점 조회 -->
    <select id="selectAverageStarByStoreId" parameterType="int" resultType="double">
        SELECT ROUND(AVG(review_star), 1) as avgStar
        FROM review
        WHERE store_id = #{storeId}
    </select>

    <!-- 특정 가게의 총 리뷰 개수 조회 -->
    <select id="selectTotalCountByStoreId" parameterType="int" resultType="int">
        SELECT COUNT(*) as totalCount
        FROM review
        WHERE store_id = #{storeId}
    </select>

    <!-- 특정 가게의 별점별 개수 조회 -->
    <select id="selectStarCountsByStoreId" parameterType="int" resultType="java.util.Map">
        SELECT 
            SUM(CASE WHEN review_star = 5 THEN 1 ELSE 0 END) as star5,
            SUM(CASE WHEN review_star = 4 THEN 1 ELSE 0 END) as star4,
            SUM(CASE WHEN review_star = 3 THEN 1 ELSE 0 END) as star3,
            SUM(CASE WHEN review_star = 2 THEN 1 ELSE 0 END) as star2,
            SUM(CASE WHEN review_star = 1 THEN 1 ELSE 0 END) as star1
        FROM review
        WHERE store_id = #{storeId}
    </select>

</mapper> 