<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.solfood.user.review.ReviewMapper">

    <!-- 리뷰 목록 조회 (최신순) -->
    <select id="selectReviewList" resultType="kr.co.solfood.user.review.ReviewVO">
        SELECT 
            review_id,
            users_id,
            store_id,
            userspayment_id,
            reviewcomment_id,
            review_star,
            review_image,
            review_date,
            review_status,
            review_title,
            review_content,
            review_response
        FROM review
        WHERE review_status = 'Y'
        ORDER BY review_id DESC
    </select>

    <!-- 평균 별점 조회 -->
    <select id="selectAverageStar" resultType="double">
        SELECT ROUND(AVG(review_star), 1)
        FROM review
        WHERE review_status = 'Y'
    </select>

    <!-- 총 리뷰 개수 조회 -->
    <select id="selectTotalCount" resultType="int">
        SELECT COUNT(*)
        FROM review
        WHERE review_status = 'Y'
    </select>

    <!-- 별점별 개수 조회 -->
    <select id="selectStarCounts" resultType="java.util.Map">
        SELECT 
            SUM(CASE WHEN review_star = 5 THEN 1 ELSE 0 END) as star5,
            SUM(CASE WHEN review_star = 4 THEN 1 ELSE 0 END) as star4,
            SUM(CASE WHEN review_star = 3 THEN 1 ELSE 0 END) as star3,
            SUM(CASE WHEN review_star = 2 THEN 1 ELSE 0 END) as star2,
            SUM(CASE WHEN review_star = 1 THEN 1 ELSE 0 END) as star1
        FROM review
        WHERE review_status = 'Y'
    </select>

    <!-- 리뷰 상세 조회 -->
    <select id="selectReviewById" parameterType="int" resultType="kr.co.solfood.user.review.ReviewVO">
        SELECT 
            review_id,
            users_id,
            store_id,
            userspayment_id,
            reviewcomment_id,
            review_star,
            review_image,
            review_date,
            review_status,
            review_title,
            review_content,
            review_response
        FROM review
        WHERE review_id = #{reviewId}
    </select>

    <!-- 리뷰 등록 -->
    <insert id="insertReview" parameterType="kr.co.solfood.user.review.ReviewVO" useGeneratedKeys="true" keyProperty="reviewId">
        INSERT INTO review (
            users_id, 
            store_id, 
            userspayment_id, 
            reviewcomment_id, 
            review_star, 
            review_image, 
            review_date, 
            review_status, 
            review_title, 
            review_content, 
            review_response
        ) VALUES (
            #{usersId}, 
            #{storeId}, 
            #{usersPaymentId}, 
            #{reviewCommentId}, 
            #{reviewStar}, 
            #{reviewImage}, 
            CURRENT_TIMESTAMP, 
            'Y', 
            #{reviewTitle}, 
            #{reviewContent}, 
            #{reviewResponse}
        )
    </insert>

    <!-- 리뷰 수정 -->
    <update id="updateReview" parameterType="kr.co.solfood.user.review.ReviewVO">
        UPDATE review SET
            review_star = #{reviewStar},
            review_image = #{reviewImage},
            review_title = #{reviewTitle},
            review_content = #{reviewContent},
            review_response = #{reviewResponse}
        WHERE review_id = #{reviewId}
          AND users_id = #{usersId}
    </update>

    <!-- 리뷰 삭제 (소프트 삭제) -->
    <delete id="deleteReview" parameterType="int">
        UPDATE review 
        SET review_status = 'N'
        WHERE review_id = #{reviewId}
    </delete>

    <!-- 음식점 이름으로 리뷰 검색 (가게 테이블과 조인) -->
    <select id="selectReviewsByRestaurant" parameterType="string" resultType="kr.co.solfood.user.review.ReviewVO">
        SELECT 
            r.review_id,
            r.users_id,
            r.store_id,
            r.userspayment_id,
            r.reviewcomment_id,
            r.review_star,
            r.review_image,
            r.review_date,
            r.review_status,
            r.review_title,
            r.review_content,
            r.review_response
        FROM review r
        INNER JOIN store s ON r.store_id = s.store_id
        WHERE s.store_name LIKE CONCAT('%', #{restaurantName}, '%')
          AND r.review_status = 'Y'
        ORDER BY r.review_id DESC
    </select>

    <!-- 리뷰 제목으로 검색 -->
    <select id="selectReviewsByTitle" parameterType="string" resultType="kr.co.solfood.user.review.ReviewVO">
        SELECT 
            review_id,
            users_id,
            store_id,
            userspayment_id,
            reviewcomment_id,
            review_star,
            review_image,
            review_date,
            review_status,
            review_title,
            review_content,
            review_response
        FROM review
        WHERE review_title LIKE CONCAT('%', #{reviewTitle}, '%')
          AND review_status = 'Y'
        ORDER BY review_id DESC
    </select>

    <!-- 가게ID로 리뷰 목록 조회 -->
    <select id="selectReviewsByStoreId" parameterType="int" resultType="kr.co.solfood.user.review.ReviewVO">
        SELECT 
            review_id,
            users_id,
            store_id,
            userspayment_id,
            reviewcomment_id,
            review_star,
            review_image,
            review_date,
            review_status,
            review_title,
            review_content,
            review_response
        FROM review
        WHERE store_id = #{storeId}
        ORDER BY review_id DESC
    </select>

    <!-- 특정 가게의 평균 별점 조회 -->
    <select id="selectAverageStarByStoreId" parameterType="int" resultType="double">
        SELECT ROUND(AVG(review_star), 1)
        FROM review
        WHERE store_id = #{storeId}
    </select>

    <!-- 특정 가게의 총 리뷰 개수 조회 -->
    <select id="selectTotalCountByStoreId" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM review
        WHERE store_id = #{storeId}
    </select>

    <!-- 특정 가게의 별점별 개수 조회 -->
    <select id="selectStarCountsByStoreId" parameterType="int" resultType="java.util.Map">
        SELECT 
            SUM(CASE WHEN review_star = 5 THEN 1 ELSE 0 END) as star5,
            SUM(CASE WHEN review_star = 4 THEN 1 ELSE 0 END) as star4,
            SUM(CASE WHEN review_star = 3 THEN 1 ELSE 0 END) as star3,
            SUM(CASE WHEN review_star = 2 THEN 1 ELSE 0 END) as star2,
            SUM(CASE WHEN review_star = 1 THEN 1 ELSE 0 END) as star1
        FROM review
        WHERE store_id = #{storeId}
    </select>

</mapper> 